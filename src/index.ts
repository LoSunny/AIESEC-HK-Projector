import {ElectronBlocker} from "@ghostery/adblocker-electron";
import {app, BrowserWindow, components, dialog, ipcMain, powerSaveBlocker, shell, WebContentsView} from "electron";
import fetch from "cross-fetch";
import {setupShortcuts} from "./controller/shortcut";
import {resizeView, setupResizer} from "./controller/resizer";
import {setupMenu} from "./controller/menu";
import {addView, deactiveAllViews, deleteView, getActiveView, getView, updatePresentView} from "./controller/views";
import {canvaWindowOpenHandler} from "./integrations/canvaHandler";
import {setupShareScreen} from "./windows/sharescreen/setup";
import {setupPDFScreen} from "./windows/pdf/setup";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const PRESENT_WINDOW_WEBPACK_ENTRY: string;
declare const PRESENT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SHARE_SCREEN_WINDOW_WEBPACK_ENTRY: string;
declare const SHARE_SCREEN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const PDF_WINDOW_WEBPACK_ENTRY: string;
declare const PDF_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const VIEWER_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const CANVA_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports
if (require("electron-squirrel-startup")) {
    app.quit();
}
console.log("Starting AIESEC HK Projector in ", app.getPath("userData"));
app.setName("AIESEC HK Projector");

let mainWindow: BrowserWindow;
let presentWindow: BrowserWindow;
let settingsWindow: BrowserWindow | null = null;
const {
    newViewMenu,
    deleteViewMenu,
    newInnerViewMenu,
    deleteInnerViewMenu
} = setupMenu(() => mainWindow, () => presentWindow, () => settingsWindow);
setupResizer();

const createWindow = (): void => {
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            partition: "main",
        },
    });
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    // mainWindow.webContents.openDevTools({mode: "detach"});

    presentWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: PRESENT_WINDOW_PRELOAD_WEBPACK_ENTRY,
            partition: "present"
        },
        autoHideMenuBar: true,
    });
    presentWindow.loadURL(PRESENT_WINDOW_WEBPACK_ENTRY);
    // presentWindow.webContents.openDevTools({mode: 'detach'});

    let closingWindow = false;
    let closeTimer = Date.now();
    [mainWindow, presentWindow].forEach(win => {
        win.addListener("close", e => {
            if (!app.isPackaged) return app.quit();
            if (closingWindow) return;
            if (Date.now() - closeTimer < 1000) return e.preventDefault();
            const response = dialog.showMessageBoxSync(win, {
                type: "info",
                title: "Confirm",
                message: "Do you really want to close the app?",
                buttons: ["Yes", "No"]
            });
            if (response === 1) {
                closeTimer = Date.now();
                return e.preventDefault();
            }
            closingWindow = true;
            app.quit();
        });
    });
    setupShareScreen(() => mainWindow, () => presentWindow, SHARE_SCREEN_WINDOW_WEBPACK_ENTRY, SHARE_SCREEN_WINDOW_PRELOAD_WEBPACK_ENTRY, newViewMenu);
    setupPDFScreen(() => mainWindow, () => presentWindow, PDF_WINDOW_WEBPACK_ENTRY, PDF_WINDOW_PRELOAD_WEBPACK_ENTRY, newViewMenu);

    if (app.isPackaged) fetch("https://api.github.com/repos/LoSunny/AIESEC-HK-Projector/releases/latest", {
        headers: {"Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}
    }).then(res => res.json()).then(res => {
        if (res.tag_name !== `v${app.getVersion()}`) {
            mainWindow.webContents.send("swal", {
                title: "Update Available",
                text: `A new version of AIESEC HK Projector is available! Version ${res.tag_name} is now available. Please update to the latest version.`,
                icon: "info",
                showCancelButton: true,
                confirmButtonText: "Update Now",
                cancelButtonText: "Later",
            })
        }
    })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
    await components.whenReady();
    powerSaveBlocker.start("prevent-display-sleep");
    // nativeTheme.themeSource = "light";

    ipcMain.on("new-window", (event, url: string, uuid: string, name: string) => {
        if (!url.startsWith("http://") && !url.startsWith("https://")) return;
        const viewType = url.includes("canva.com") ? "canva" : url.includes("docs.google.com") ? "google" : "general";
        const view = new WebContentsView({
            webPreferences: {
                partition: "persist:canva",
                // partition: 'test',
                preload: VIEWER_WINDOW_PRELOAD_WEBPACK_ENTRY,
                disableHtmlFullscreenWindowResize: true,
            },
        });
        view.webContents.setWindowOpenHandler(({url}) => {
            if (viewType === "canva" && url === "https://www.canva.com/popout") {
                return canvaWindowOpenHandler(CANVA_WINDOW_PRELOAD_WEBPACK_ENTRY, mainWindow, view, url, uuid, newInnerViewMenu, deleteInnerViewMenu);
            } else if (viewType === "google" && url === "about:blank") {
                // return googleWindowOpenHandler(mainWindow, url, uuid);
            }
            if (url !== "about:blank") view.webContents.loadURL(url);
            return {
                action: "deny"
            };
        });
        deactiveAllViews();
        presentWindow.webContents.send("new-source", uuid, name, view.webContents.getMediaSourceId(presentWindow.webContents));
        mainWindow.contentView.addChildView(view);
        // view.webContents.openDevTools({mode: 'detach'});
        addView({id: uuid, name, type: viewType, webContents: [view], active: true, present: false});
        resizeView();
        view.webContents.setUserAgent(view.webContents.session.getUserAgent().replace(/AIESECHKProjector\/.+? /, "").replace(/Electron\/.+? /, ""));
        newViewMenu(view, uuid, name);

        ElectronBlocker.fromPrebuiltAdsAndTracking(fetch).then((blocker) => {
            blocker.enableBlockingInSession(view.webContents.session);
            view.webContents.loadURL(url);

            if (viewType === "google") {
                view.webContents.session.webRequest.onHeadersReceived({urls: ["<all_urls>"]}, (details, callback) => {
                    // Delete all CSP headers
                    if (details.url === url) {
                        const headers = details.responseHeaders;
                        delete headers["content-security-policy"];
                        delete headers["content-security-policy-report-only"];
                        return callback({cancel: false, responseHeaders: headers});
                    }

                    blocker.onHeadersReceived(details, callback);
                });
            }
        }).catch(() => view.webContents.loadURL(url));
    });
    ipcMain.on("change-active", (event, source: string) => {
        const view = getActiveView();
        if (view) {
            view.active = false;
            // if (view.webContents.length !== 0) mainWindow.contentView.removeChildView(view.webContents[0]);
        }
        const newView = getView(source);
        if (!newView) return;
        newView.active = true;
        // if (newView.webContents.length !== 0) mainWindow.contentView.addChildView(newView.webContents[0]);
        resizeView();
    });
    ipcMain.on("change-present", (event, source: string) => {
        updatePresentView(source);
        presentWindow.webContents.send("change-source", source);
        resizeView();
    });
    ipcMain.on("delete-window", (event, source: string) => {
        const view = getView(source);
        if (!view) return;
        presentWindow.webContents.send("delete-source", source);
        view.webContents.forEach(webContents => {
            webContents.webContents.close();
            mainWindow.contentView.removeChildView(webContents);
        });
        deleteView(source);
        deleteViewMenu(source);
    });
    ipcMain.on("rename-window", (event, uuid: string, newName: string) => {
        getView(uuid).name = newName;
        presentWindow.webContents.send("rename-source", uuid, newName);
    });
    ipcMain.on("freeze", () => {
        presentWindow.webContents.send("freeze");
    });
    setupShortcuts(() => mainWindow);
    ipcMain.on("google-slide-changed", (event) => {
        console.log("Google Slide Changed", event.sender);
    });
    ipcMain.on("volume-mute", (event, uuid: string) => {
        const view = getView(uuid);
        if (!view) return;
        view.webContents.forEach(webContents => {
            webContents.webContents.setAudioMuted(!webContents.webContents.isAudioMuted());
        });
    });
    ipcMain.on("open-settings", (event) => {
        if (settingsWindow == null || settingsWindow.isDestroyed()) {
            settingsWindow = new BrowserWindow({
                height: 600,
                width: 800,
                webPreferences: {
                    preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,
                    partition: "settings",
                },
            });
            settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);
            // settingsWindow.webContents.openDevTools({mode: "detach"});
            settingsWindow.on("closed", () => {
                settingsWindow = null;
            });
        } else if (settingsWindow != null) {
            if (settingsWindow.isMinimized()) {
                settingsWindow.restore();
            }
            settingsWindow.focus();
        }
    });
    ipcMain.on("open-url", (event, url: string) => {
        shell.openExternal(url);
    });
    createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
